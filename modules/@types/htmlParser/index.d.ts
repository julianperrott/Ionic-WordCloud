/** Declaration file generated by dts-gen */


export interface Tag {
    raw: string;
    data: string;
    type: string;
    name: string;
    attribs: object;
    children: [Tag];
  }

export class DefaultHandler {
    constructor(callback: any, options: any);

    done(): void;

    error(error: any): void;

    handleCallback(error: any): void;

    handleElement(element: any): void;

    isEmptyTag(element: any): any;

    reset(): any;

    writeComment(element: any): void;

    writeDirective(element: any): void;

    writeTag(element: any): void;

    writeText(element: any): void;

    static reWhitespace: RegExp;

}

export class Parser {
    constructor(handler: any, options: any);

    done(): void;

    getLocation(startTag: any): any;

    handleError(error: any): void;

    parseAttribs(element: any): void;

    parseChunk(data: any): void;

    parseComplete(data: any): void;

    parseTagAttribs(elements: any): any;

    parseTagName(data: any): any;

    parseTags(): void;

    reset(): void;

    validateHandler(handler: any): void;

    writeHandler(forceFlush: any): void;

}
/*
export class RssHandler {
    constructor(callback: any);

    done(): any;

}

export const ElementType: {
    Comment: string;
    Directive: string;
    Script: string;
    Style: string;
    Tag: string;
    Text: string;
};

export namespace DefaultHandler {
    namespace prototype {
        const dom: any;

        function done(): void;

        function error(error: any): void;

        function handleCallback(error: any): void;

        function handleElement(element: any): void;

        function isEmptyTag(element: any): any;

        function reset(): any;

        function writeComment(element: any): void;

        function writeDirective(element: any): void;

        function writeTag(element: any): void;

        function writeText(element: any): void;

        namespace done {
            const prototype: {
            };

        }

        namespace error {
            const prototype: {
            };

        }

        namespace handleCallback {
            const prototype: {
            };

        }

        namespace handleElement {
            const prototype: {
            };

        }

        namespace isEmptyTag {
            const prototype: {
            };

        }

        namespace reset {
            const prototype: {
            };

        }

        namespace writeComment {
            const prototype: {
            };

        }

        namespace writeDirective {
            const prototype: {
            };

        }

        namespace writeTag {
            const prototype: {
            };

        }

        namespace writeText {
            const prototype: {
            };

        }

    }

}

export namespace DomUtils {
    function getElementById(id: any, currentElement: any, recurse: any): any;

    function getElements(options: any, currentElement: any, recurse: any, limit: any): any;

    function getElementsByTagName(name: any, currentElement: any, recurse: any, limit: any): any;

    function getElementsByTagType(type: any, currentElement: any, recurse: any, limit: any): any;

    function testElement(options: any, element: any): any;

    namespace getElementById {
        const prototype: {
        };

    }

    namespace getElements {
        const prototype: {
        };

    }

    namespace getElementsByTagName {
        const prototype: {
        };

    }

    namespace getElementsByTagType {
        const prototype: {
        };

    }

    namespace testElement {
        const prototype: {
        };

    }

}

export namespace Parser {
    namespace prototype {
        function done(): void;

        function getLocation(startTag: any): any;

        function handleError(error: any): void;

        function parseAttribs(element: any): void;

        function parseChunk(data: any): void;

        function parseComplete(data: any): void;

        function parseTagAttribs(elements: any): any;

        function parseTagName(data: any): any;

        function parseTags(): void;

        function reset(): void;

        function validateHandler(handler: any): void;

        function writeHandler(forceFlush: any): void;

        namespace done {
            const prototype: {
            };

        }

        namespace getLocation {
            const prototype: {
            };

        }

        namespace handleError {
            const prototype: {
            };

        }

        namespace parseAttribs {
            const prototype: {
            };

        }

        namespace parseChunk {
            const prototype: {
            };

        }

        namespace parseComplete {
            const prototype: {
            };

        }

        namespace parseTagAttribs {
            const prototype: {
            };

        }

        namespace parseTagName {
            const prototype: {
            };

        }

        namespace parseTags {
            const prototype: {
            };

        }

        namespace reset {
            const prototype: {
            };

        }

        namespace validateHandler {
            const prototype: {
            };

        }

        namespace writeHandler {
            const prototype: {
            };

        }

    }

}

export namespace RssHandler {
    namespace prototype {
        const dom: any;

        function done(): any;

        function error(error: any): void;

        function handleCallback(error: any): void;

        function handleElement(element: any): void;

        function isEmptyTag(element: any): any;

        function reset(): any;

        function writeComment(element: any): void;

        function writeDirective(element: any): void;

        function writeTag(element: any): void;

        function writeText(element: any): void;

        namespace done {
            const prototype: {
            };

        }

        namespace error {
            const prototype: {
            };

        }

        namespace handleCallback {
            const prototype: {
            };

        }

        namespace handleElement {
            const prototype: {
            };

        }

        namespace isEmptyTag {
            const prototype: {
            };

        }

        namespace reset {
            const prototype: {
            };

        }

        namespace writeComment {
            const prototype: {
            };

        }

        namespace writeDirective {
            const prototype: {
            };

        }

        namespace writeTag {
            const prototype: {
            };

        }

        namespace writeText {
            const prototype: {
            };

        }

    }

}


*/